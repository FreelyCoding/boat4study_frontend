<template>
	<view class="container">
		<view class="status-bar">
			<!--自定义navbar-->
			<uni-nav-bar title="题库详情" background-color="#00aaff" color="#FFFFFF" status-bar="true">
				<block slot="left">
					<view class="note-navbar">
						<uni-icons type="left" color="#FFFFFF" size="18" @click="back()" />
					</view>
				</block>
			</uni-nav-bar>
		</view>

		<view>
			<!-- 输入框示例 -->
			<uni-popup ref="inputDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog cancelText="取消" confirmText="确认编辑" title="编辑题库信息" type="info"
					@confirm="confirmProEdit()" @close="inputDialogClose()">
					<uni-card style="width: 280px; ">
						<uni-section title="题库名" type="line">
							<u-input type="text" placeholder="请输入题库名" v-model="proDetailEdit.title" />
						</uni-section>
						<uni-section title="题库简介" type="line">
							<u-input type="textarea" placeholder="请输入题库简介" custom-style="height: 300px;"
								v-model="proDetailEdit.descrip" />
						</uni-section>
					</uni-card>
				</uni-popup-dialog>
			</uni-popup>
		</view>
		
		<view>
			<uni-popup ref="deleteProSetDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog cancelText="取消删除" confirmText="确认删除" title="您确定要删除题库吗" type="error"
					@confirm="deleteProSetDialogConfirm()" @close="deleteProSetDialogClose()">
				</uni-popup-dialog>
			</uni-popup>
		</view>
		
		<view>
			<uni-popup ref="selectProNumDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog cancelText="取消" confirmText="开始做题" title="请选择题目数量" type="info"
					@confirm="jumpToSimuPractice()" @close="selectProNumDialogClose()">
					<uni-card style="width: 280px; ">
						<slider value="1" @change="selectProNum" min="1" block-size="14"
						 :max="proDetail.totalNum" show-value />
					</uni-card>
				</uni-popup-dialog>
			</uni-popup>
		</view>
		
		<view>
			<uni-popup ref="selectProTypeDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog cancelText="取消" confirmText="开始做题" title="请选择题目类型" type="info"
					@confirm="jumpToTypePractice()" @close="selectProTypeDialogClose()">
					<uni-card style="width: 280px; ">
						<u-radio-group 
								v-model="problem_type_select"
								placement="column"
								iconPlacement="right">
							<u-radio label="选择题" :name="0" :customStyle="{marginBottom: '8px'}"></u-radio>
							<u-radio label="填空题" :name="1" :customStyle="{marginBottom: '8px'}"></u-radio>
							<u-radio label="判断题" :name="2" :customStyle="{marginBottom: '8px'}"></u-radio>
						</u-radio-group>
					</uni-card>
				</uni-popup-dialog>
			</uni-popup>
		</view>
		
		<view>
			<!-- 输入框示例 -->
			<uni-popup ref="errorNoProDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog type="error" cancelText="关闭" confirmText="确认"
				 title="错误" content="没有题目"
					@confirm="confirmErrorNoProDialog()" @close="confirmErrorNoProDialog()"></uni-popup-dialog>
			</uni-popup>
		</view>
		<view>
			<!-- 输入框示例 -->
			<uni-popup ref="errorNoFavDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog type="error" cancelText="关闭" confirmText="确认"
				 title="错误" content="没有收藏题目"
					@confirm="confirmErrorNoFavDialog()" @close="confirmErrorNoFavDialog()"></uni-popup-dialog>
			</uni-popup>
		</view>
		<view>
			<!-- 输入框示例 -->
			<uni-popup ref="errorNoWrongDialog" type="dialog" :isMaskClick="false">
				<uni-popup-dialog type="error" cancelText="关闭" confirmText="确认"
				 title="错误" content="没有错题"
					@confirm="confirmErrorNoWrongDialog()" @close="confirmErrorNoWrongDialog()"></uni-popup-dialog>
			</uni-popup>
		</view>
		
		<u-popup :show="showOperationTable" :round="10" mode="bottom" @close="closeOperationTable" :overlayOpacity="0.2">
			<view style="margin: 20px 10px 20px 10px;">
				<u-row @click="editPS()">
					<u-col :span="2">
						<u-icon name="/static/pic/problemSet/edit_pro_set.svg" size="40px"></u-icon>
					</u-col>
					<u-col :span="9">
						<p class="star-title"> 编辑信息 </p>
					</u-col>
					<u-col :span="1">
						<u-icon name="arrow-right" size="20px"></u-icon>
					</u-col>
				</u-row>
				<u-divider style="margin-bottom: 15px;"></u-divider>
				<u-row @click="jumpToProblemUpload()">
					<u-col :span="2">
						<u-icon name="/static/pic/problemSet/add_pro.svg" size="40px"></u-icon>
					</u-col>
					<u-col :span="9">
						<p class="star-title"> 添加试题 </p>
					</u-col>
					<u-col :span="1">
						<u-icon name="arrow-right" size="20px"></u-icon>
					</u-col>
				</u-row>
				<u-divider style="margin-bottom: 15px;"></u-divider>
				<u-row @click="deletePS()">
					<u-col :span="2">
						<u-icon name="/static/pic/delete_group.svg" size="40px"></u-icon>
					</u-col>
					<u-col :span="9">
						<p class="star-title"> 删除题库 </p>
					</u-col>
					<u-col :span="1">
						<u-icon name="arrow-right" size="20px"></u-icon>
					</u-col>
				</u-row>
			</view>
		</u-popup>

		<view class="main-body">
			<view class="title-line">
				<uni-row>
					<uni-col :span="12">
						<view style="font-size: 20px; font-weight: bold;">
							{{proDetail.title}}
						</view>
						<view style="font-size: 14px; color: darkgrey;">
							{{proDetail.descrip}}
						</view>
					</uni-col>
					<uni-col :span="3" :offset="9" align="right">
						<u-icon name="/static/pic/problemSet/more.svg" size="25px"
							style="width: 25px;" @click="openOperationTable"
							 v-if="have_access"></u-icon>
					</uni-col>
				</uni-row>
			</view>
			
			<view class="owner_info_box">
				<u-row>
					<u-col :span="2">
						<u-avatar :src="myRequest.imageUrl() + '/public' + proDetail.ownerAvatar"
						size="55px"
							></u-avatar>
					</u-col>
					<u-col :span="8">
						<view class="" style="font-size: 16px; margin-left: 10px;">
							{{proDetail.ownerName}}
						</view>
						<view class="" style="font-size: 14px; color: darkgray; margin-left: 10px;">
							<u-row>
								<u-col :span="6">
									{{proDetail.created_at}}
								</u-col>
								<u-col :span="6">
									{{proDetail.totalNum}}题
								</u-col>
							</u-row>
						</view>
					</u-col>
				</u-row>
			</view>
			
			<view class="proSetStatis">
				<uni-row>
					<uni-col :span="8">
						<view @click="jumpToWrongProblmes()">
							<view class="" style="margin: auto;">
								<u-icon name="/static/pic/problemSet/thinking.svg" size="40px"></u-icon>
							</view>
							<view class="" style="text-align: center; font-size: 15px;">
								我的错题
							</view>
							<view class="" style="text-align: center; font-size: 12px; color: darkgrey;">
								({{proDetail.wrong_problem_count}})
							</view>
						</view>
					</uni-col>
					<uni-col :span="8">
						<view @click="jumpToFavProblmes()">
							<view class="" style="margin: auto;">
								<u-icon name="/static/pic/problemSet/envolop.svg" size="40px"></u-icon>
							</view>
							<view class="" style="text-align: center; font-size: 15px;">
								我的收藏
							</view>
							<view class="" style="text-align: center; font-size: 12px; color: darkgrey;">
								({{proDetail.fav_problem_count}})
							</view>
						</view>
					</uni-col>
					<uni-col :span="8">
						<view @click="jumpToSetProblemList()">
							<view class="" style="margin: auto;">
								<u-icon name="/static/pic/homeNote.png" size="40px"></u-icon>
							</view>
							<view class="" style="text-align: center; font-size: 15px;">
								所有试题
							</view>
							<view class="" style="text-align: center; font-size: 12px; color: darkgrey;">
								({{proDetail.totalNum}})
							</view>
						</view>
					</uni-col>
				</uni-row>
			</view>

			<view class="practise-box">
				<view class="practise-box-title" style="font-size: 18px;">
					练习模式
				</view>

				<view class="practise-box-row">
					<uni-row>
						<uni-col :span="12">
							<view class="practise-card" @click="jumpToSequencePractice()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											顺序练习
										</view>
										<view class="practise-card-detail">
											试题顺序练习
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/book.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
						<uni-col :span="12">
							<view class="practise-card" @click="openProNumSelectDialog()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											模拟考试
										</view>
										<view class="practise-card-detail">
											随机抽题模拟
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/abc.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
					</uni-row>
				</view>
				<view class="practise-box-row">
					<uni-row>
						<uni-col :span="12">
							<view class="practise-card" @click="jumpToRandomPractice()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											随机练习
										</view>
										<view class="practise-card-detail">
											试题顺序打乱练习
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/phone.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
						<uni-col :span="12">
							<view class="practise-card" @click="openSelectProTypeDialog()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											题型练习
										</view>
										<view class="practise-card-detail">
											按照题型分类练习
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/pencil.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
					</uni-row>
				</view>
				<view class="practise-box-row">
					<uni-row>
						<uni-col :span="12">
							<view class="practise-card" @click="jumpToFavPractice()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											藏题练习
										</view>
										<view class="practise-card-detail">
											练习收藏的题目
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/desk.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
						<uni-col :span="12">
							<view class="practise-card" @click="jumpToWrongPractice()">
								<uni-row>
									<uni-col :span="18">
										<view class="practise-card-title">
											错题练习
										</view>
										<view class="practise-card-detail">
											针对错题进行练习
										</view>
									</uni-col>
									<uni-col :span="6">
										<u-icon name="/static/pic/problemSet/gas_station.svg" size="40px"></u-icon>
									</uni-col>
								</uni-row>
							</view>
						</uni-col>
					</uni-row>
				</view>

			</view>


		</view>

		<view class="footer">
			<u-row>
				<u-col span="2"></u-col>
				<u-col span="3">
					<u-button v-if="proDetail.is_public == true" type="primary" shape="circle" text="已公开" @click="unPublishPS()"></u-button>
					<u-button v-if="proDetail.is_public == false" type="primary" shape="circle" text="公开" @click="publishPS()"></u-button>
				</u-col>
				<u-col span="2"></u-col>
				<u-col span="3">
					<u-button v-if="proDetail.is_favorite == true" type="success" shape="circle" text="已收藏" @click="unstarPS()"></u-button>
					<u-button v-if="proDetail.is_favorite == false" type="success" shape="circle" text="收藏" @click="starPS()"></u-button>
				</u-col>
				<u-col span="2"></u-col>
			</u-row>
		</view>

	</view>
</template>

<script>
	import api from '@/common/api.js';
	import myRequest from '../../common/request';

	export default {
		data() {
			return {
				user_info: {},
				
				have_access: false,
				
				proDetail: {
					user_id: -1,
					title: "",
					created_at: '',
					ownerName: "",
					ownerAvatar: "",
					totalNum: 0,
					descrip: '',
					is_favorite: false,
					is_public: false,
					wrong_problem_count: 0,
					fav_problem_count: 0,
				},
				
				proDetailEdit: {
					title: "",
					descrip: '',
				},
				problem_set_id: 0,
				practice_proNum: 1,
				
				problem_type_select: 0,
				showOperationTable: false,
			}
		},
		onLoad: function(option) { //option为object类型，会序列化上个页面传递的参数
			myRequest.checkLogin()
			this.problem_set_id = option.id
			this.user_info = uni.getStorageSync('user_info')
			console.log('this.problem_set_id: ' + this.problem_set_id); //打印出上个页面传递的参数。
		},
		onShow: function() {
			var _this = this
			
			myRequest.request('/check/problem_set/' + this.problem_set_id
			, 'GET', {}).then(
				function(res) {
					console.log(res)
					if (res.statusCode == 200) {
						_this.have_access = true
					} else if (res.statusCode == 401) {
						myRequest.redirectToLogin()
					} else if (res.statusCode == 403) {
						_this.have_access = false
					} else if (res.statusCode == 404) {
						_this.have_access = false
					} else {
						myRequest.toast()
					}
				}
			).catch(
				function(res) {
					console.log(res)
					myRequest.toast()
			})
			
			uni.request({
				url: myRequest.interfaceUrl() + '/problem_set/all?id=' + this.problem_set_id,
				method: 'GET',
				header: {
					'X-Token': myRequest.getToken()
				},

				success: (res) => {
					console.log(res)
					if (res.statusCode == 200) {
						this.proDetail.title = res.data.problem_set[0].name
						this.proDetail.created_at = res.data.problem_set[0].created_at.slice(0, 10)
						this.proDetail.totalNum = res.data.problem_set[0].problem_count
						this.proDetail.descrip = res.data.problem_set[0].description
						this.proDetail.is_favorite = res.data.problem_set[0].is_favorite
						this.proDetail.user_id = res.data.problem_set[0].user_id
						this.proDetail.is_public = res.data.problem_set[0].is_public
						console.log(this.proDetail)
						uni.request({
							url: myRequest.interfaceUrl() +
								`/user/info/${res.data.problem_set[0].user_id}`,
							method: 'GET',
							header: {
								'X-Token': myRequest.getToken()
							},

							success: (res2) => {
								console.log(res2)
								if (res2.statusCode == 200) {
									this.proDetail.ownerName = res2.data.nick_name
									this.proDetail.ownerAvatar = res2.data.avatar_path
								} else if (res2.statusCode == 401) {
									myRequest.redirectToLogin()
								} else {
									myRequest.toast()
								}
							},

							fail: (res2) => {
								console.log(res2)
								myRequest.toast()
							},
						})

					} else if (res.statusCode == 401) {
						myRequest.redirectToLogin()
					} else {
						myRequest.toast()
					}
				},

				fail: (res) => {
					console.log(res)
					myRequest.toast()
				}
			})
			
			uni.request({
				url: myRequest.interfaceUrl() +
					'/problem_set/statistic/wrong_count?id=' + this.problem_set_id,
				method: 'GET',
				header: {
					'X-Token': myRequest.getToken()
				},
							
				success: (res2) => {
					console.log(res2)
					if (res2.statusCode == 200) {
						this.proDetail.wrong_problem_count = res2.data
					} else if (res2.statusCode == 401) {
						myRequest.redirectToLogin()
					} else {
						myRequest.toast()
					}
				},
							
				fail: (res2) => {
					console.log(res2)
					myRequest.toast()
				},
			})
			
			uni.request({
				url: myRequest.interfaceUrl() +
					'/problem_set/statistic/fav_count?id=' + this.problem_set_id,
				method: 'GET',
				header: {
					'X-Token': myRequest.getToken()
				},
							
				success: (res2) => {
					console.log(res2)
					if (res2.statusCode == 200) {
						this.proDetail.fav_problem_count = res2.data
					} else if (res2.statusCode == 401) {
						myRequest.redirectToLogin()
					} else {
						myRequest.toast()
					}
				},
							
				fail: (res2) => {
					console.log(res2)
					myRequest.toast()
				},
			})

		},
		methods: {
			jumpToSetProblemList() {
				uni.navigateTo({
					url: "/pages/problemSet/problemSetProblemList?id=" + this.problem_set_id
				})
			},
			jumpToWrongProblmes() {
				uni.navigateTo({
					url: "/pages/problemSet/problemSetWrongProblems?id=" + this.problem_set_id
				})
			},
			jumpToFavProblmes() {
				uni.navigateTo({
					url: "/pages/problemSet/problemSetFavProblems?id=" + this.problem_set_id
				})
			},
			
			jumpToSequencePractice() {
				if (this.proDetail.totalNum == 0) {
					this.$refs.errorNoProDialog.open()
				} else {
					uni.navigateTo({
						url: "/pages/problemExam/problemExam?id=" + this.problem_set_id
					})
				}
			},
			jumpToRandomPractice() {
				if (this.proDetail.totalNum == 0) {
					this.$refs.errorNoProDialog.open()
				} else {
					uni.navigateTo({
						url: "/pages/problemExam/problemRandomExam?id=" + this.problem_set_id
					})
				}
			},
			jumpToWrongPractice() {
				if (this.proDetail.wrong_problem_count == 0) {
					this.$refs.errorNoWrongDialog.open()
				} else {
					uni.navigateTo({
						url: "/pages/problemExam/problemWrongProExam?id=" + this.problem_set_id
					})
				}
			},
			jumpToFavPractice() {
				if (this.proDetail.fav_problem_count == 0) {
					this.$refs.errorNoFavDialog.open()
				} else {
					uni.navigateTo({
						url: "/pages/problemExam/problemFavProExam?id=" + this.problem_set_id
					})
				}
			},
			jumpToSimuPractice() {
				this.$refs.selectProNumDialog.close()
				uni.navigateTo({
					url: "/pages/problemExam/problemSimuExam?id=" + this.problem_set_id + "&problem_num=" + this.practice_proNum
				})
			},
			jumpToTypePractice() {
				this.$refs.selectProTypeDialog.close()
				uni.navigateTo({
					url: "/pages/problemExam/problemTypeExam?id=" + this.problem_set_id + "&problem_type=" + this.problem_type_select
				})
			},
			
			jumpToProblemUpload() {
				this.showOperationTable = false
				uni.navigateTo({
					url: "/pages/problemSet/problemUpload?id=" + this.problem_set_id
				})
			},
			
			publishPS() {
				this.proDetail.is_public = true
				this.proDetailEdit.is_public = true
				if (this.user_info.user_id != this.proDetail.user_id) {
					myRequest.toast('您没有修改权限~', 1000)
					setTimeout(() => {
						uni.hideToast();
					}, 1000)
				} else {
					this.change_public_state()
				}
			},
			unPublishPS() {
				if (this.user_info.user_id == this.proDetail.user_id) {
					this.proDetail.is_public = false
					this.proDetailEdit.is_public = false
				}
				if (this.user_info.user_id != this.proDetail.user_id) {
					myRequest.toast('您没有修改权限~', 1000)
					setTimeout(() => {
						uni.hideToast();
					}, 1000)
				} else {
					this.change_public_state()
				}
			},
			change_public_state() {
				var data = {
					id: parseInt(this.problem_set_id),
					is_public: this.proDetailEdit.is_public
				}
				var _this = this
				
				myRequest.request(api.problem_set_update(), 'PUT', data).then(
					function(res2) {
						console.log(res2)
						if (res2.statusCode == 200) {
							myRequest.toast('修改成功', 1500, true)
						} else if (res2.statusCode == 401) {
							myRequest.redirectToLogin()
						} else {
							myRequest.toast()
						}
					}
				).catch(
					function(res) {
						console.log(res)
						myRequest.toast()
					}
				)
			},
			
			openOperationTable() {
				if (this.showOperationTable == false) {
					this.showOperationTable = true
				} else {
					this.showOperationTable = false
				}
				
			},
			closeOperationTable() {
				this.showOperationTable = false
			},
			
			back() {
				uni.navigateBack({
				    delta: 1
				});
			},
			
			confirmErrorNoProDialog() {
				setTimeout(() => {
					this.$refs.errorNoProDialog.close()
				}, 100)
			},
			confirmErrorNoFavDialog() {
				setTimeout(() => {
					this.$refs.errorNoFavDialog.close()
				}, 100)
			},
			confirmErrorNoWrongDialog() {
				setTimeout(() => {
					this.$refs.errorNoWrongDialog.close()
				}, 100)
			},
			
			openProNumSelectDialog() {
				if (this.proDetail.totalNum == 0) {
					this.$refs.errorNoProDialog.open()
				} else {
					this.$refs.selectProNumDialog.open()
				}
			},
			selectProNumDialogClose() {
				this.practice_proNum = 1
				setTimeout(() => {
					this.$refs.selectProNumDialog.close()
				}, 100)
			},
			selectProNum(event) {
				console.log(event.detail.value)
				this.practice_proNum = event.detail.value
			},
			
			openSelectProTypeDialog() {
				if (this.proDetail.totalNum == 0) {
					this.$refs.errorNoProDialog.open()
				} else {
					this.$refs.selectProTypeDialog.open()
				}
			},
			selectProTypeDialogClose() {
				setTimeout(() => {
					this.$refs.selectProTypeDialog.close()
				}, 100)
			},
			
			editPS() {
				this.showOperationTable = false
				this.proDetailEdit.descrip = this.proDetail.descrip
				this.proDetailEdit.title = this.proDetail.title
				this.$refs.inputDialog.open()
			},
			inputDialogClose() {
				setTimeout(() => {
					this.$refs.inputDialog.close()
				}, 100)
			},
			confirmProEdit() {
				
				var data = {
					id: parseInt(this.problem_set_id),
					name: this.proDetailEdit.title,
					description: this.proDetailEdit.descrip,
				}
				var _this = this
				
				myRequest.request(api.problem_set_update(), 'PUT', data).then(
					function(res2) {
						console.log(res2)
						if (res2.statusCode == 200) {
							myRequest.toast('编辑成功', 1500, true)
							_this.proDetail.title = _this.proDetailEdit.title
							_this.proDetail.descrip = _this.proDetailEdit.descrip
							setTimeout(() => {
								_this.$refs.inputDialog.close()
							}, 100)
						} else if (res2.statusCode == 401) {
							myRequest.redirectToLogin()
						} else {
							myRequest.toast()
						}
					}
				).catch(
					function(res) {
						console.log(res)
						myRequest.toast()
					}
				)
				
			},
			
			deletePS() {
				this.showOperationTable = false
				this.$refs.deleteProSetDialog.open()
			},
			deleteProSetDialogClose() {
				setTimeout(() => {
					this.$refs.deleteProSetDialog.close()
				}, 100)
			},
			deleteProSetDialogConfirm() {
				uni.request({
					url: myRequest.interfaceUrl() + api.problem_set_delete(this.problem_set_id),
					method: 'DELETE',
					header: {
						'X-Token': myRequest.getToken()
					},
				
					success: (res) => {
						console.log(res)
						if (res.statusCode == 200) {
							myRequest.toast('删除成功', 1000, true)
							setTimeout(() => {
								uni.hideToast();
								//关闭提示后跳转
								uni.navigateBack({
										delta: 1,
								});
							}, 1000)
						} else if (res.statusCode == 401) {
							myRequest.redirectToLogin()
						} else {
							myRequest.toast()
						}
					},
				
					fail: (res) => {
						console.log(res)
						myRequest.toast()
					}
				})
			},

			starPS() {
				uni.request({
					url: myRequest.interfaceUrl() + api.problem_set_favorite(this.problem_set_id),
					method: 'POST',
					header: {
						'X-Token': myRequest.getToken()
					},
			
					success: (res) => {
						console.log(res)
						if (res.statusCode == 200) {
							this.proDetail.is_favorite = true
							myRequest.toast('收藏成功', 1000, true)
						} else if (res.statusCode == 401) {
							myRequest.redirectToLogin()
						} else {
							myRequest.toast()
						}
					},
			
					fail: (res) => {
						console.log(res)
						myRequest.toast()
					}
				})
			},
			unstarPS() {
				uni.request({
					url: myRequest.interfaceUrl() + api.problem_set_unfavorite(this.problem_set_id),
					method: 'DELETE',
					header: {
						'X-Token': myRequest.getToken()
					},
							
					success: (res) => {
						console.log(res)
						if (res.statusCode == 200) {
							this.proDetail.is_favorite = false
							myRequest.toast('取消收藏成功', 1000, true)
						} else if (res.statusCode == 401) {
							myRequest.redirectToLogin()
						} else {
							myRequest.toast()
						}
					},
							
					fail: (res) => {
						console.log(res)
						myRequest.toast()
					}
				})
			},


		},
	}
</script>

<style lang="scss">
	.status-bar {
		width: 100%;
		position: sticky;
		top: 0;
		z-index: 10;
	}
	
	.container {
		height: 100%;
	}

	.main-body {
		margin: 0 10px 0 10px;
	}

	.title-line {
		margin: 15px 0 15px 0;
	}

	.owner_info_box {
		margin-bottom: 15px;
	}

	.proSetStatis {
		margin-bottom: 15px;
	}

	.practise-box {
		.practise-box-title {
			margin-bottom: 20px;
		}

		.practise-box-row {
			margin-bottom: 20px;
		}

		.practise-card {
			background-color: #e5f3ff;
			height: 50px;
			width: 90%;
			margin: auto;
			border-radius: 10px;
			justify-content: center;
			padding: 12px;

			.practise-card-title {
				font-size: 15px;

			}

			.practise-card-detail {
				margin-top: 3px;
				color: darkgrey;
				font-size: 10px;
			}
		}
	}

	.button-group {
		margin-bottom: 15px;
	}

	.footer {
		margin: 0;
		padding-top: 10px;
		padding-bottom: 10px;
		width: 100vw;
		background-color: #fcfcfc;
		position: fixed;
		bottom: 0;
		height: 60px;
		overflow: auto;
	}
</style>
